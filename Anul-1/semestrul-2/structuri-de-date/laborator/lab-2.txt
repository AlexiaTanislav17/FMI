#include <iostream>
//lista simplu inlantuita
using namespace std;

struct Node {
    int data;
    Node* next;
};

void insert(Node*& head, int value) {
    Node* newNode = new Node{value, head};
    head = newNode;
}

void remove(Node*& head, int value) {
    Node* temp = head;
    Node* prev = nullptr;

    while (temp != nullptr && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == nullptr) return;

    if (prev == nullptr) {
        head = temp->next;
    } else {
        prev->next = temp->next;
    }

    delete temp;
}

Node* search(Node* head, int value) {
    Node* temp = head;
    while (temp != nullptr && temp->data != value) {
        temp = temp->next;
    }
    return temp;
}

void display(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

int main() {
    Node* head = nullptr;
    insert(head, 1);
    insert(head, 2);
    insert(head, 3);
    display(head);

    remove(head, 2);
    display(head);

    Node* found = search(head, 3);
    if (found) {
        cout << "Gasit: " << found->data << endl;
    } else {
        cout << "nu exista" << endl;
    }

    return 0;
}



--------------------------------------------------------------------------------------------------


#include <iostream>
//lista dublu inlantuita
using namespace std;

struct DoublyNode {
    int data;
    DoublyNode* next;
    DoublyNode* prev;
};

void insert(DoublyNode*& head, int value) {
    DoublyNode* newNode = new DoublyNode{value, head, nullptr};
    if (head != nullptr) {
        head->prev = newNode;
    }
    head = newNode;
}

void remove(DoublyNode*& head, int value) {
    DoublyNode* temp = head;

    while (temp != nullptr && temp->data != value) {
        temp = temp->next;
    }

    if (temp == nullptr) return;

    if (temp->prev != nullptr) {
        temp->prev->next = temp->next;
    } else {
        head = temp->next;
    }

    if (temp->next != nullptr) {
        temp->next->prev = temp->prev;
    }

    delete temp;
}

DoublyNode* search(DoublyNode* head, int value) {
    DoublyNode* temp = head;
    while (temp != nullptr && temp->data != value) {
        temp = temp->next;
    }
    return temp;
}

void display(DoublyNode* head) {
    DoublyNode* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " <-> ";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

int main() {
    DoublyNode* head = nullptr;
    insert(head, 1);
    insert(head, 2);
    insert(head, 3);
    display(head);

    remove(head, 2);
    display(head);

    DoublyNode* found = search(head, 3);
    if (found) {
        cout << "Gasit: " << found->data << endl;
    } else {
        cout << "nu exista" << endl;
    }

    return 0;
}


-------------------------------------------------------------------------------------------------------------------


#include <iostream>
//lista circulara
using namespace std;

struct CircularNode {
    int data;
    CircularNode* next;
};

void insert(CircularNode*& head, int value) {
    CircularNode* newNode = new CircularNode{value, nullptr};
    if (head == nullptr) {
        head = newNode;
        newNode->next = head;
    } else {
        CircularNode* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }
}

void remove(CircularNode*& head, int value) {
    if (head == nullptr) return;

    CircularNode* temp = head;
    CircularNode* prev = nullptr;

    do {
        if (temp->data == value) {
            if (prev == nullptr) {
                CircularNode* last = head;
                while (last->next != head) {
                    last = last->next;
                }
                last->next = head->next;
                CircularNode* toDelete = head;
                head = head->next;
                delete toDelete;
            } else {
                prev->next = temp->next;
                delete temp;
            }
            return;
        }
        prev = temp;
        temp = temp->next;
    } while (temp != head);
}

CircularNode* search(CircularNode* head, int value) {
    if (head == nullptr) return nullptr;

    CircularNode* temp = head;
    do {
        if (temp->data == value) {
            return temp;
        }
        temp = temp->next;
    } while (temp != head);

    return nullptr;
}

void display(CircularNode* head) {
    if (head == nullptr) return;

    CircularNode* temp = head;
    do {
        cout << temp->data << " -> ";
        temp = temp->next;
    } while (temp != head);
    cout << "(head)" << endl;
}

int main() {
    CircularNode* head = nullptr;
    insert(head, 1);
    insert(head, 2);
    insert(head, 3);
    display(head);

    remove(head, 2);
    display(head);

    CircularNode* found = search(head, 3);
    if (found) {
        cout << "Gasit: " << found->data << endl;
    } else {
        cout << "nu exista" << endl;
    }

    return 0;
}
