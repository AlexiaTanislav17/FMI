#include <iostream>
#include <vector>
#include <cctype> 
using namespace std;

struct Node {
    char key;
    string value;
    Node* next;
    
    Node(char k, string v) : key(k), value(v), next(nullptr) {}
};

int hashFunction(char key) {
    return tolower(key) - 'a';
}

bool search(vector<Node*>& hashTable, string value) {
    char key = value[0];
    int hashIndex = hashFunction(key);
    Node* temp = hashTable[hashIndex];

    while (temp != nullptr) {
        if (temp->value == value) {
            return true;
        }
        temp = temp->next;
    }

    return false;
}


void insert(vector<Node*>& hashTable, string value) {
    char key = value[0];
    int hashIndex = hashFunction(key);
    Node* newNode = new Node(key, value);
    
    if (!search(hashTable, value)){
        if (hashTable[hashIndex] == nullptr) {
            hashTable[hashIndex] = newNode;
        } else {
            Node* temp = hashTable[hashIndex];
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
}

void remove(vector<Node*>& hashTable, string wantedValue) {
    char key = wantedValue[0];
    int hashIndex = hashFunction(key);
    Node* temp = hashTable[hashIndex];
    Node* prev = nullptr;

    while (temp != nullptr && temp->value != wantedValue) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "cuvantul nu exista" << endl;
        return;
    }

    if (prev == nullptr) {
        hashTable[hashIndex] = temp->next;
    } else {
        prev->next = temp->next;
    }

    delete temp;
}

void display(const vector<Node*>& hashTable) {
    for (int i = 0; i < hashTable.size(); ++i) {
        cout << "Index " << char(i + 'a') << ": ";
        Node* temp = hashTable[i];
        while (temp != nullptr) {
            cout << "(" << temp->key << ", " << temp->value << ") -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
}

int main() {
    int size = 26; 
    int nr;
    string wordToInsert, searchWord, removeWord;
    char raspuns;
    vector<Node*> hashTable(size, nullptr);
    cout << "nr de cuv pe care le vrei introduse in table: ";
    cin >> nr;
    for (int i = 0; i < nr; i++){
        cout << "cuvantul pe care il vrei in tabel: ";
        cin >> wordToInsert;
        insert(hashTable, wordToInsert);
    }

    display(hashTable);
    
    cout << "vrei sa cauti vreun cuvant?y/n \n";
    cin >> raspuns;
    if (tolower(raspuns) == 'y'){
        cout << "care e cuvantul: ";
        cin >> searchWord;
        if (search(hashTable, searchWord)){
            cout << searchWord << " gasit\n";
        }else{
            cout << searchWord << " nu a fost gasit\n";
        }
    }
    
    cout << "vrei sa stergi vreun cuvant? y/n ";
    cin >> raspuns;
    if (tolower(raspuns) == 'y'){
        cout << "care e cuvantul: ";
        cin >> removeWord;
        remove(hashTable, removeWord);
    }

    display(hashTable);

    return 0;
}
