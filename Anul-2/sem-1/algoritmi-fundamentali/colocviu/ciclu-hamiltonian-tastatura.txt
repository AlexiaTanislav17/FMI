#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

bool isSafe(int v, int pos, vector<vector<int>>& graph, vector<int>& path) {
    
    if (graph[path[pos - 1]][v] == 0) return false; 
    for (int i = 0; i < pos; i++) {
        if (path[i] == v) return false; 
    }
    return true;
}

bool hamiltonianCycleUtil(int n, vector<vector<int>>& graph, vector<int>& path, int pos) {
    if (pos == n) {
        if (graph[path[pos - 1]][path[0]] == 1) {
            return true; 
        }
        return false;
    }

    for (int v = 1; v < n; v++) {
        if (isSafe(v, pos, graph, path)) {
            path[pos] = v;
            if (hamiltonianCycleUtil(n, graph, path, pos + 1)) {
                return true;
            }
            path[pos] = -1;
        }
    }

    return false; 
}

void hamiltonianCycle(int n, vector<vector<int>>& graph) {
    vector<int> path(n, -1);

    // Primul nod
    path[0] = 0;

    if (hamiltonianCycleUtil(n, graph, path, 1)) {
        cout << "Ciclul Hamiltonian: ";
        for (int i = 0; i < n; i++) {
            cout << path[i] << " ";
        }
        cout << endl;
    } else {
        cout << "Nu este ciclu Hamiltonian!" << endl;
    }
}

int main() {
    int n, m;
    cout << "nr de noduri (n): ";
    cin >> n;
    cout << "nr de muchii (m): ";
    cin >> m;


    vector<vector<int>> graph(n, vector<int>(n, 0));

    cout << "muchiile (u v):\n";
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph[u][v] = graph[v][u] = 1; // Graful este neorientat
    }

    hamiltonianCycle(n, graph);

    return 0;
}
