#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>

#define MAXN 100010

using namespace std;

vector<int> graph[MAXN];
vector<int> parent(MAXN, -1);
unordered_set<int> visited;

// In case you need to reset the values for another dfs iteration

void resetValues(vector<int> partialTree[], vector<int> &parent, unordered_set<int> &visited)
{
    for (int i = 1; i <= MAXN; i++)
    {
        while (!partialTree[i].empty())
            partialTree[i].pop_back();
    }
    for (auto el : parent)
        el = -1;
    visited.clear();

    int node, previousParent;
    // In case you need to erase an edge from the graph
    graph[previousParent].erase(remove(graph[previousParent].begin(), graph[previousParent].end(), node), graph[previousParent].end());
    graph[node].erase(remove(graph[node].begin(), graph[node].end(), previousParent), graph[node].end());
}


void dfs(vector<int> graph[], int node, unordered_set<int> &visited, vector<int> &parent)
{
    visited.insert(node);

    for (const auto neighbor : graph[node])
    {
        if (visited.count(neighbor) == 0)
        {
            parent[neighbor] = node;
            dfs(graph, neighbor, visited, parent);
        }
    }
}

int main()
{

    return 0;
}