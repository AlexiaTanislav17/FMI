#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <cstring>
using namespace std;

const int INF = INT_MAX;

// BFS pentru a gasi un drum de augmentare
bool bfs(int n, vector<vector<int>> &capacity, vector<vector<int>> &adj, vector<int> &parent, int source, int sink) {
    fill(parent.begin(), parent.end(), -1);
    queue<int> q;
    q.push(source);
    parent[source] = -2;

    while (!q.empty()) {
        int curr = q.front();
        q.pop();

        for (int next : adj[curr]) {
            if (parent[next] == -1 && capacity[curr][next] > 0) { // Capacitate disponibilă
                parent[next] = curr;
                int new_flow = min(capacity[curr][next], INF); // Fluxul posibil
                if (next == sink) {
                    return true; // am gasit un drum de augmentare
                }
                q.push(next);
            }
        }
    }
    return false; // nu e drum de augmentare
}

// alg Edmonds-Karp
int edmondsKarp(int n, vector<vector<int>> &capacity, vector<vector<int>> &adj, int source, int sink) {
    int flow = 0;
    vector<int> parent(n);

    int new_flow;
    while (bfs(n, capacity, adj, parent, source, sink)) {
        new_flow = INF;
        int curr = sink;

        // gasim fluxul minim pe drumul de augmentare
        while (curr != source) {
            int prev = parent[curr];
            new_flow = min(new_flow, capacity[prev][curr]);
            curr = prev;
        }

        // updatam capacitatile reziduale
        curr = sink;
        while (curr != source) {
            int prev = parent[curr];
            capacity[prev][curr] -= new_flow;
            capacity[curr][prev] += new_flow;
            curr = prev;
        }

        flow += new_flow;
    }

    return flow;
}

int main() {
    int n, m;
    cout << "Enter number of nodes (n): ";
    cin >> n;
    cout << "Enter number of edges (m): ";
    cin >> m;

    vector<vector<int>> capacity(n, vector<int>(n, 0)); // Capacitățile
    vector<vector<int>> adj(n); // Lista de adiacență

    // Citim muchiile
    cout << "Enter the edges in the format (u v cap):\n";
    for (int i = 0; i < m; i++) {
        int u, v, cap;
        cin >> u >> v >> cap;
        capacity[u][v] = cap; // Setăm capacitatea muchiei
        adj[u].push_back(v);  // Adăugăm v la lista de vecini a lui u
        adj[v].push_back(u);  // Adăugăm u la lista de vecini a lui v (pentru fluxul invers)
    }

    int source, sink;
    cout << "Enter the source node: ";
    cin >> source;
    cout << "Enter the sink node: ";
    cin >> sink;

    cout << "Maximum Flow: " << edmondsKarp(n, capacity, adj, source, sink) << endl;

    return 0;
}