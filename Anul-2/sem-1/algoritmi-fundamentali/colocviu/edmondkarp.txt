#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <cstring>
using namespace std;

const int INF = INT_MAX;

// Funcție BFS pentru a găsi un drum de augmentare
bool bfs(int n, vector<vector<int>> &capacity, vector<vector<int>> &adj, vector<int> &parent, int source, int sink) {
    fill(parent.begin(), parent.end(), -1);
    queue<pair<int, int>> q;
    q.push({source, INF});
    parent[source] = -2;

    while (!q.empty()) {
        int curr = q.front().first;
        int flow = q.front().second;
        q.pop();

        for (int next : adj[curr]) {
            if (parent[next] == -1 && capacity[curr][next] > 0) { // Capacitate disponibilă
                parent[next] = curr;
                int new_flow = min(flow, capacity[curr][next]);
                if (next == sink) {
                    return new_flow;
                }
                q.push({next, new_flow});
            }
        }
    }
    return 0;
}

// Algoritmul Edmonds-Karp
int edmondsKarp(int n, vector<vector<int>> &capacity, vector<vector<int>> &adj, int source, int sink) {
    int flow = 0;
    vector<int> parent(n);

    int new_flow;
    while ((new_flow = bfs(n, capacity, adj, parent, source, sink))) {
        flow += new_flow;

        // Actualizăm capacitățile reziduale
        int curr = sink;
        while (curr != source) {
            int prev = parent[curr];
            capacity[prev][curr] -= new_flow;
            capacity[curr][prev] += new_flow;
            curr = prev;
        }
    }

    return flow;
}

int main() {
    int n = 6; // Numărul de noduri
    int source = 0, sink = 5;

    // Capacitățile dintre noduri
    vector<vector<int>> capacity(n, vector<int>(n, 0));

    // Lista de adiacență
    vector<vector<int>> adj(n);

    // Adăugăm muchii și capacități
    auto addEdge = [&](int u, int v, int cap) {
        capacity[u][v] = cap;
        adj[u].push_back(v);
        adj[v].push_back(u);
    };

    addEdge(0, 1, 10);
    addEdge(0, 2, 10);
    addEdge(1, 2, 2);
    addEdge(1, 3, 4);
    addEdge(1, 4, 8);
    addEdge(2, 4, 9);
    addEdge(3, 5, 10);
    addEdge(4, 3, 6);
    addEdge(4, 5, 10);

    cout << "Maximum Flow: " << edmondsKarp(n, capacity, adj, source, sink) << endl;

    return 0;
}
