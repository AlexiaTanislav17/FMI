#include <iostream>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <algorithm>
#include <numeric>
#include <string>
#include <cstring>

using namespace std;

void vectorCheatsheet() {
    vector<int> v = {1, 2, 3, 4, 5};
    v.push_back(6); // Add element to the end
    v.pop_back(); // Remove last element
    sort(v.begin(), v.end()); // Sort vector
    reverse(v.begin(), v.end()); // Reverse vector
    int sum = accumulate(v.begin(), v.end(), 0); // Sum of elements
    auto it = find(v.begin(), v.end(), 3); // Find element
    if (it != v.end()) cout << "Element found at index " << distance(v.begin(), it) << endl;
    v.insert(v.begin() + 2, 10); // Insert element at position
    v.erase(v.begin() + 2); // Erase element at position
    v.clear(); // Clear all elements
    bool empty = v.empty(); // Check if vector is empty
    int size = v.size(); // Get size of vector
}

void unorderedSetCheatsheet() {
    unordered_set<int> us = {1, 2, 3, 4, 5};
    us.insert(6); // Add element
    us.erase(3); // Remove element
    auto it = us.find(2); // Find element
    if (it != us.end()) cout << "Element found" << endl;
    us.clear(); // Clear all elements
    bool empty = us.empty(); // Check if unordered_set is empty
    int size = us.size(); // Get size of unordered_set
    us.count(2); // Count occurrences of an element (0 or 1)
}

void stringCheatsheet() {
    string s = "hello";
    s += " world"; // Concatenate strings
    s.append("!"); // Append string
    s.erase(5, 6); // Erase substring
    s.insert(5, " beautiful"); // Insert substring
    reverse(s.begin(), s.end()); // Reverse string
    cout << s << endl;
    s.replace(0, 5, "hi"); // Replace substring
    size_t pos = s.find("beautiful"); // Find substring
    if (pos != string::npos) cout << "Substring found at position " << pos << endl;
    string sub = s.substr(0, 2); // Get substring
    const char* cstr = s.c_str(); // Convert to C-style string
    s.clear(); // Clear string
    bool empty = s.empty(); // Check if string is empty
    int size = s.size(); // Get size of string
}

void unorderedMapCheatsheet() {
    unordered_map<int, string> um;
    um[1] = "one"; // Insert element
    um[2] = "two";
    um.erase(1); // Remove element
    auto it = um.find(2); // Find element
    if (it != um.end()) cout << "Element found: " << it->second << endl;
    um.clear(); // Clear all elements
    bool empty = um.empty(); // Check if unordered_map is empty
    int size = um.size(); // Get size of unordered_map
    um.count(2); // Count occurrences of a key (0 or 1)
    for (const auto& pair : um) {
        cout << pair.first << ": " << pair.second << endl; // Iterate through elements
    }
}

int main() {
    vectorCheatsheet();
    unorderedSetCheatsheet();
    stringCheatsheet();
    unorderedMapCheatsheet();
    return 0;
}