#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

int levenshteinDistance(const string &s1, const string &s2) {
    int n = s1.size(), m = s2.size();
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

    // Inițializarea bazei
    for (int i = 0; i <= n; i++) dp[i][0] = i; // Transformare în șir gol
    for (int j = 0; j <= m; j++) dp[0][j] = j; // Transformare în șir gol

    // Calculul distanței Levenshtein
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1]; // Fără cost suplimentar
            } else {
                dp[i][j] = 1 + min({dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]});
            }
        }
    }

    return dp[n][m];
}

int main() {
    string s1 = "kitten";
    string s2 = "sitting";

    cout << "Levenshtein Distance between \"" << s1 << "\" and \"" << s2 << "\": ";
    cout << levenshteinDistance(s1, s2) << endl;

    return 0;
}
